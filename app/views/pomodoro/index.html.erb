<%# ポモドーロタイマー画面 %>
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <%# Toast通知用のコンテナ %>
        <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>
        <%# ヘッダー %>
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold text-white">ポモドーロタイマー</h1>
            <div class="flex space-x-4">
                <%= link_to "学習記録一覧", study_sessions_path, 
                    class: "bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors" %>
                <%= link_to "ダッシュボード", dashboard_path, 
                    class: "bg-emerald-500 hover:bg-emerald-600 text-white px-4 py-2 rounded-lg transition-colors" %>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <%# メインタイマーセクション %>
            <div class="lg:col-span-2">
                <div class="bg-gray-100 rounded-lg shadow-lg p-4 md:p-8">
                    <%# タイマー表示 %>
                    <div class="text-center mb-6 md:mb-8">
                        <div id="timer-display" class="text-4xl md:text-6xl font-mono font-bold text-gray-800 mb-4">
                            25:00
                        </div>
                        <div id="timer-status" class="text-lg md:text-xl text-gray-600 mb-6">
                            作業時間
                        </div>

                        <%# タイマーコントロール %>
                        <div class="flex flex-col sm:flex-row justify-center gap-3 sm:gap-4 mb-6">
                            <button id="start-btn" class="bg-green-500 hover:bg-green-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-semibold transition-colors touch-manipulation">
                                開始
                            </button>
                            <button id="pause-btn" class="bg-yellow-500 hover:bg-yellow-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-semibold transition-colors hidden touch-manipulation">
                                一時停止
                            </button>
                            <button id="resume-btn" class="bg-emerald-500 hover:bg-emerald-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-semibold transition-colors hidden touch-manipulation">
                                再開
                            </button>
                            <button id="finish-btn" class="bg-orange-500 hover:bg-orange-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-semibold transition-colors hidden touch-manipulation">
                                終了して記録
                            </button>
                            <button id="reset-btn" class="bg-gray-500 hover:bg-gray-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-semibold transition-colors touch-manipulation">
                                リセット
                            </button>
                        </div>

                        <%# 通知許可のお知らせ %>
                        <div id="notification-banner" class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6 hidden">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <div class="p-2 bg-blue-100 rounded-full">
                                        <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5-5-5h5v-12h0z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="text-sm font-medium text-blue-900">通知を有効にしますか？</p>
                                        <p class="text-xs text-blue-700">タイマー終了時にブラウザ通知を受け取れます</p>
                                    </div>
                                </div>
                                <div class="flex space-x-2">
                                    <button id="enable-notifications" class="bg-emerald-500 hover:bg-emerald-600 text-white px-3 py-1 rounded text-sm transition-colors">
                                        有効にする
                                    </button>
                                    <button id="dismiss-notifications" class="bg-gray-300 hover:bg-gray-400 text-gray-700 px-3 py-1 rounded text-sm transition-colors">
                                        閉じる
                                    </button>
                                </div>
                            </div>
                        </div>

                        <%# プログレスバー %>
                        <div class="w-full bg-gray-200 rounded-full h-3 mb-4">
                            <div id="progress-bar" class="bg-green-500 h-3 rounded-full transition-all duration-1000" style="width: 0%"></div>
                        </div>
                    </div>

                    <%# 記録保存フォーム %>
                    <div id="session-form" class="hidden border-t pt-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">セッションを記録</h3>
                        <%= form_with model: StudySession.new, url: '/pomodoro/save_session', method: :post, local: false, id: 'save-session-form', class: "space-y-4" do |form| %>
                        <div>
                            <%= form.label :note, "メモ（任意）", class: "block text-sm font-medium text-gray-700 mb-1" %>
                            <%= form.text_area :note, 
                                  placeholder: "学習内容や感想を記録...",
                                  rows: 3,
                                  class: "w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500" %>
                        </div>

                        <div>
                            <%= form.label :tag_ids, "タグ", class: "block text-sm font-medium text-gray-700 mb-2" %>
                            <div class="grid grid-cols-2 md:grid-cols-3 gap-2">
                                <% @tags.each do |tag| %>
                                <label class="flex items-center space-x-2 p-2 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                    <%= check_box_tag "tag_ids[]", tag.id, false, 
                                       class: "rounded text-emerald-500 focus:ring-emerald-500" %>
                                    <div class="flex items-center space-x-2">
                                        <div class="w-3 h-3 rounded-full" style="background-color: <%= tag.color %>;"></div>
                                        <span class="text-sm text-gray-700"><%= tag.name %></span>
                                    </div>
                                </label>
                                <% end %>
                            </div>
                        </div>

                        <div class="flex space-x-4">
                            <%= form.submit "記録を保存", 
                               class: "bg-emerald-500 hover:bg-emerald-600 text-white px-6 py-2 rounded-lg font-semibold transition-colors" %>
                            <button type="button" id="skip-save" class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg font-semibold transition-colors">
                                記録せずに続行
                            </button>
                        </div>

                        <%# 隠しフィールド %>
                        <%= form.hidden_field :duration, value: 25 %>
                        <%= form.hidden_field :studied_at, value: Time.current.iso8601 %>
                        <% end %>
                    </div>
                </div>
            </div>

            <%# サイドバー：統計情報 %>
            <div class="space-y-6">
                <%# 本日の統計 %>
                <div class="bg-gray-100 rounded-lg shadow-md p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">本日の記録</h3>
                    <div class="space-y-3">
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">セッション数</span>
                            <span class="text-xl font-bold text-blue-600"><%= @today_sessions %>回</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-600">学習時間</span>
                            <span class="text-xl font-bold text-green-600"><%= format_duration_minutes(@today_minutes) %></span>
                        </div>
                    </div>
                </div>

                <%# 最近の記録 %>
                <div class="bg-gray-100 rounded-lg shadow-md p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">最近の記録</h3>
                    <% if @recent_sessions.any? %>
                    <div class="space-y-3">
                        <% @recent_sessions.each do |session| %>
                        <div class="border-b border-gray-100 pb-2 last:border-b-0">
                            <div class="flex justify-between items-start">
                                <div>
                                    <div class="text-sm font-medium text-gray-900">
                                        <%= session.studied_at.strftime("%m/%d %H:%M") %>
                                    </div>
                                    <div class="text-xs text-gray-500">
                                        <%= session.duration %>分
                                    </div>
                                </div>
                                <div class="flex flex-wrap gap-1">
                                    <% session.tags.limit(2).each do |tag| %>
                                    <span class="inline-block w-3 h-3 rounded-full" style="background-color: <%= tag.color %>;" title="<%= tag.name %>"></span>
                                    <% end %>
                                    <% if session.tags.count > 2 %>
                                    <span class="text-xs text-gray-400">+<%= session.tags.count - 2 %></span>
                                    <% end %>
                                </div>
                            </div>
                        </div>
                        <% end %>
                    </div>
                    <% else %>
                    <p class="text-gray-500 text-sm">記録がありません</p>
                    <% end %>
                </div>

                <%# ポモドーロテクニックについて %>
                <div class="bg-blue-50 rounded-lg p-6">
                    <h3 class="text-lg font-semibold text-blue-900 mb-3">ポモドーロテクニック</h3>
                    <div class="text-sm text-blue-800 space-y-2">
                        <p>• 25分間集中して作業</p>
                        <p>• 5分間の短い休憩</p>
                        <p>• 4セット後に長い休憩（15-30分）</p>
                        <p>• 中断されたら最初から</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<%# 音声ファイル（オプション） %>
<audio id="timer-sound" preload="none">
    <!-- 音声ファイルは今後追加予定 -->
</audio>

<script>
    // Turbo対応: turbo:loadイベントでも実行
    function initPomodoroTimer() {

        // 既存のタイマーをクリア
        if (window.pomodoroTimerInterval) {
            clearInterval(window.pomodoroTimerInterval);
            window.pomodoroTimerInterval = null;
        }
        
        // タイマー関連の要素
        const timerDisplay = document.getElementById('timer-display');
        const timerStatus = document.getElementById('timer-status');
        const progressBar = document.getElementById('progress-bar');

        // ボタン要素
        const startBtn = document.getElementById('start-btn');
        const pauseBtn = document.getElementById('pause-btn');
        const resumeBtn = document.getElementById('resume-btn');
        const finishBtn = document.getElementById('finish-btn');
        const resetBtn = document.getElementById('reset-btn');

        // フォーム関連
        const sessionForm = document.getElementById('session-form');
        const saveSessionForm = document.getElementById('save-session-form');
        const skipSaveBtn = document.getElementById('skip-save');

        // 音声
        const timerSound = document.getElementById('timer-sound');

        // 通知関連の要素
        const notificationBanner = document.getElementById('notification-banner');
        const enableNotificationsBtn = document.getElementById('enable-notifications');
        const dismissNotificationsBtn = document.getElementById('dismiss-notifications');
        const toastContainer = document.getElementById('toast-container');

        // 必須要素の存在チェック
        if (!timerDisplay || !timerStatus || !progressBar || !startBtn || !resetBtn || !toastContainer) {
            console.error('ポモドーロタイマーに必要な要素が見つかりません');
            return;
        }

        // タイマーの状態（グローバル変数として宣言）
        window.pomodoroTimerInterval = null;
        let totalSeconds = 25 * 60; // 25分
        let remainingSeconds = totalSeconds;
        let isBreakTime = false;
        let isPaused = false;
        let startTime = null; // タイマー開始時間を記録

        // Toast通知を表示する関数
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            const bgColor = type === 'success' ? 'bg-green-500' :
                type === 'error' ? 'bg-red-500' :
                type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500';

            toast.className = `${bgColor} text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300 opacity-0 translate-x-full`;
            toast.textContent = message;

            toastContainer.appendChild(toast);

            // アニメーション
            setTimeout(() => {
                toast.classList.remove('opacity-0', 'translate-x-full');
            }, 100);

            // 3秒後に削除
            setTimeout(() => {
                toast.classList.add('opacity-0', 'translate-x-full');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // タイマー表示を更新
        function updateDisplay() {
            const minutes = Math.floor(remainingSeconds / 60);
            const seconds = remainingSeconds % 60;
            timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

            // プログレスバーの更新
            const progress = ((totalSeconds - remainingSeconds) / totalSeconds) * 100;
            progressBar.style.width = `${progress}%`;

            // プログレスバーの色を変更
            if (isBreakTime) {
                progressBar.className = 'bg-blue-500 h-3 rounded-full transition-all duration-1000';
            } else {
                progressBar.className = 'bg-green-500 h-3 rounded-full transition-all duration-1000';
            }
        }

        // タイマー開始
        function startTimer() {
            if (window.pomodoroTimerInterval) {
                clearInterval(window.pomodoroTimerInterval);
            }

            // 開始時間を記録（作業時間のみ）
            if (!isBreakTime && !startTime) {
                startTime = new Date();
            }

            window.pomodoroTimerInterval = setInterval(function() {
                remainingSeconds--;
                updateDisplay();

                if (remainingSeconds <= 0) {
                    clearInterval(window.pomodoroTimerInterval);
                    timerComplete();
                }
            }, 1000);

            isPaused = false;
            showButtons(['pause', 'finish', 'reset']);
        }

        // タイマー一時停止
        function pauseTimer() {
            if (window.pomodoroTimerInterval) {
                clearInterval(window.pomodoroTimerInterval);
                window.pomodoroTimerInterval = null;
            }
            isPaused = true;
            showButtons(['resume', 'finish', 'reset']);
        }

        // タイマー再開
        function resumeTimer() {
            startTimer();
            showButtons(['pause', 'finish', 'reset']);
        }

        // タイマーリセット
        function resetTimer() {
            if (window.pomodoroTimerInterval) {
                clearInterval(window.pomodoroTimerInterval);
                window.pomodoroTimerInterval = null;
            }

            if (isBreakTime) {
                // 休憩時間から作業時間に戻る
                totalSeconds = 25 * 60;
                remainingSeconds = totalSeconds;
                isBreakTime = false;
                timerStatus.textContent = '作業時間';
            } else {
                // 作業時間をリセット
                remainingSeconds = totalSeconds;
            }

            // 開始時間もリセット
            startTime = null;
            isPaused = false;
            updateDisplay();
            showButtons(['start']);
            sessionForm.classList.add('hidden');
        }

        // タイマー途中終了（実際の経過時間で記録）
        function finishTimer() {
            if (window.pomodoroTimerInterval) {
                clearInterval(window.pomodoroTimerInterval);
                window.pomodoroTimerInterval = null;
            }

            if (!isBreakTime && startTime) {
                // 実際の経過時間を計算（分単位）
                const currentTime = new Date();
                const elapsedMinutes = Math.round((currentTime - startTime) / (1000 * 60));

                // フォームに実際の時間を設定
                const durationField = document.querySelector('#save-session-form input[name="study_session[duration]"]');
                const studiedAtField = document.querySelector('#save-session-form input[name="study_session[studied_at]"]');
                if (durationField) {
                    durationField.value = Math.max(1, elapsedMinutes); // 最低1分
                }
                if (studiedAtField) {
                    studiedAtField.value = startTime.toISOString(); // 開始時間を記録
                }

                // セッション保存フォームを表示
                sessionForm.classList.remove('hidden');
                showButtons(['reset']);

                // Toast通知は保存時に表示するので、ここでは表示しない
            } else {
                showToast('記録できる学習時間がありません', 'warning');
            }
        }

        // タイマー完了時の処理
        function timerComplete() {
            // 音声通知
            playNotificationSound();
            
            // ブラウザ通知
            if (Notification.permission === 'granted') {
                new Notification(isBreakTime ? '休憩時間が終了しました！' : '作業時間が終了しました！', {
                    body: isBreakTime ? '次の作業セッションを開始しましょう。' : '5分間の休憩を取りましょう。',
                    icon: '/favicon.ico'
                });
            }

            if (isBreakTime) {
                // 休憩終了 → 作業時間へ
                totalSeconds = 25 * 60;
                remainingSeconds = totalSeconds;
                isBreakTime = false;
                timerStatus.textContent = '作業時間';
                updateDisplay();
                showButtons(['start']);
            } else {
                // 作業終了 → セッション保存画面表示
                if (startTime) {
                    const durationField = document.querySelector('#save-session-form input[name="study_session[duration]"]');
                    const studiedAtField = document.querySelector('#save-session-form input[name="study_session[studied_at]"]');
                    if (durationField) {
                        durationField.value = 25; // 完了時は25分
                    }
                    if (studiedAtField) {
                        studiedAtField.value = startTime.toISOString(); // 開始時間を記録
                    }
                }
                sessionForm.classList.remove('hidden');
                showButtons(['reset']);
            }
        }

        // 通知音を再生する関数
        function playNotificationSound() {
            // 音声ファイルがある場合は再生
            if (timerSound && timerSound.src) {
                try {
                    timerSound.play().catch(function(error) {
                        // 音声再生に失敗した場合はビープ音で代替
                        playBeepSound();
                    });
                } catch (error) {
                    playBeepSound();
                }
            } else {
                // 音声ファイルがない場合はビープ音
                playBeepSound();
            }
        }

        // Web Audio APIを使用したビープ音
        function playBeepSound() {
            try {
                const audioContext = new(window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();

                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);

                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                oscillator.type = 'sine';

                gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);

                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.5);
            } catch (error) {
                // Web Audio APIが使用できない場合は静かに無視
            }
        }

        // ボタン表示の制御
        function showButtons(buttons) {
            [startBtn, pauseBtn, resumeBtn, finishBtn].forEach(btn => btn.classList.add('hidden'));

            buttons.forEach(button => {
                switch (button) {
                    case 'start':
                        startBtn.classList.remove('hidden');
                        break;
                    case 'pause':
                        pauseBtn.classList.remove('hidden');
                        break;
                    case 'resume':
                        resumeBtn.classList.remove('hidden');
                        break;
                    case 'finish':
                        if (!isBreakTime) { // 作業時間のみ表示
                            finishBtn.classList.remove('hidden');
                        }
                        break;
                }
            });
        }

        // 休憩時間開始
        function startBreak() {
            totalSeconds = 5 * 60; // 5分
            remainingSeconds = totalSeconds;
            isBreakTime = true;
            startTime = null; // 開始時間をリセット
            timerStatus.textContent = '休憩時間';
            updateDisplay();
            sessionForm.classList.add('hidden');
            showButtons(['start']);
        }

        // イベントリスナー
        if (startBtn) startBtn.addEventListener('click', startTimer);
        if (pauseBtn) pauseBtn.addEventListener('click', pauseTimer);
        if (resumeBtn) resumeBtn.addEventListener('click', resumeTimer);
        if (finishBtn) finishBtn.addEventListener('click', finishTimer);
        if (resetBtn) resetBtn.addEventListener('click', resetTimer);

        // セッション保存スキップ
        if (skipSaveBtn) {
            skipSaveBtn.addEventListener('click', function() {
                startBreak();
            });
        }

        // セッション保存フォーム送信
        if (saveSessionForm) {
            saveSessionForm.addEventListener('submit', function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const csrfToken = document.querySelector('meta[name="csrf-token"]');

                if (!csrfToken) {
                    showToast('CSRF トークンが見つかりません', 'error');
                    return;
                }

                fetch('/pomodoro/save_session', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-CSRF-Token': csrfToken.getAttribute('content')
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('サーバーエラーが発生しました');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.status === 'success') {
                            // セッション時間を含む成功メッセージ
                            const durationField = document.querySelector('#save-session-form input[name="study_session[duration]"]');
                            const minutes = durationField ? durationField.value : '?';
                            showToast(`${minutes}分間のセッションを保存しました！`, 'success');
                            startBreak();
                        } else {
                            showToast('保存に失敗しました: ' + (data.message || '不明なエラー'), 'error');
                        }
                    })
                    .catch(error => {
                        console.error('保存エラー:', error);
                        showToast('保存中にエラーが発生しました', 'error');
                    });
            });
        }

        // 通知許可のイベントリスナー
        if (enableNotificationsBtn) {
            enableNotificationsBtn.addEventListener('click', function() {
                if ('Notification' in window) {
                    Notification.requestPermission().then(permission => {
                        if (permission === 'granted') {
                            showToast('通知が有効になりました', 'success');
                            if (notificationBanner) notificationBanner.classList.add('hidden');
                        } else {
                            showToast('通知の許可が必要です', 'warning');
                        }
                    });
                } else {
                    showToast('このブラウザは通知をサポートしていません', 'warning');
                }
            });
        }

        if (dismissNotificationsBtn) {
            dismissNotificationsBtn.addEventListener('click', function() {
                if (notificationBanner) notificationBanner.classList.add('hidden');
            });
        }

        // 通知バナーの表示判定
        if ('Notification' in window && Notification.permission === 'default' && notificationBanner) {
            notificationBanner.classList.remove('hidden');
        }

        // 初期表示
        updateDisplay();
        showButtons(['start']);
    }

    // DOMContentLoadedとturbo:loadの両方で実行
    document.addEventListener('DOMContentLoaded', initPomodoroTimer);
    document.addEventListener('turbo:load', initPomodoroTimer);
</script>